version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - frontend-network
      - frontend-auth-network
    depends_on:
      - api-gateway
    container_name:
      frontend

  rabbitmq:
    ports:
      - "5672:5672"
      - "15672:15672"
    image: rabbitmq:3.13.3-management
    networks:
      - rabbit-network
    container_name: 'rabbitmq'

  postgres-for-product-microservice:
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=rsr
      - POSTGRES_DB=ms-product
    image: postgres:latest
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
    networks:
      - product-network
    container_name: 'postgres-for-product-microservice'

  product-microservice:
    image: ghcr.io/rsr-by-aypa/product-microservice:latest
    ports:
      - "8082:8080"
    depends_on:
      - postgres-for-product-microservice
      - rabbitmq
    networks:
      - product-network
      - rabbit-network
    container_name: product-microservice

  api-gateway:
    image: ghcr.io/rsr-by-aypa/api-gateway:latest
    ports:
      - "8081:8080"
    environment:
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI=http://keycloak:8080/auth/realms/RockSolidRemedies
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - api-network
      - product-network
      - frontend-network
    container_name: api-gateway


  postgres-for-microservice-2:
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=S3cret
      - POSTGRES_USER=ms2
      - POSTGRES_DB=ms2
    image: postgres:latest
    container_name: 'postgres-for-microservice-2'

  postgres-for-keycloak:
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: S3cret
      POSTGRES_USER: rsr_admin
      POSTGRES_DB: keycloak_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    image: postgres:latest
    container_name: 'postgres-for-keycloak'
    networks:
      - keycloak-network

  keycloak:
    image: ghcr.io/rsr-by-aypa/rsr_keycloak:latest #quay.io/keycloak/keycloak:legacy
    container_name: 'keycloak'
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres-for-keycloak
      DB_SCHEMA: public
      DB_DATABASE: keycloak_db
      DB_USER: rsr_admin
      DB_PASSWORD: S3cret
      KEYCLOAK_USER: rsr_admin
      KEYCLOAK_PASSWORD: rsr_password
    ports:
      - "8080:8080"
    depends_on:
      - postgres-for-keycloak
    networks:
      - api-network
      - keycloak-network
      - frontend-auth-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  product-network:
    driver: bridge
  rabbit-network:
    driver: bridge
  api-network:
    driver: bridge
  keycloak-network:
    driver: bridge
  frontend-network:
    driver: bridge
  frontend-auth-network:
    driver: bridge

volumes:
  postgres_product_data:
    driver: local
  postgres_keycloak_data:
    driver: local
  keycloak_data:
    driver: local 